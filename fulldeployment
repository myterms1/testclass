{{- $name := .Release.Name }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  {{- if not .Values.autoscaling.enabled }}
  {{- with .replicaCount }}
  replicas: {{ . }}
  {{- end }}
  {{- end }}
  template:
    metadata:
      # Annotations for Dynatrace auto-injection must remain off
      # dynatrace.com/inject: '{{ .Values.appConfig.enabledDynatrace }}'
      # metadata-enrichment.dynatrace.com/inject: '{{ .Values.appConfig.enabledDynatrace }}'
      # oneagent.dynatrace.com/inject: '{{ .Values.appConfig.enabledDynatrace }}'
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      {{- end }}

      securityContext:
        windowsOptions:
          gmsaCredentialSpecName: {{ include "app.serviceAccountName" . }}

      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range . }}
        - {{- toYaml . | nindent 10 }}
          labelSelector:
            matchLabels:
              {{- include "app.selectorLabels" $ | nindent 14 }}
        {{- end }}
      {{- end }}

      # -------- Init OneAgent (parametrized) --------
      {{- $root := . }}
      {{- with $root.Values.appConfig.initOneAgent }}
      {{- if .enabled }}
      initContainers:
        - name: install-oneagent
          image: "{{- if .image.registry }}{{ .image.registry }}/{{ end }}{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .image.pullPolicy }}
          command: ["powershell","-NoProfile","-NonInteractive","-ExecutionPolicy","Bypass","-Command"]
          args:
            - |-
{{ tpl .script $root | nindent 14 }}
              {{- if .sleepAfterSeconds }}
              Write-Host "OneAgent init: sleeping for {{ .sleepAfterSeconds }} seconds...";
              Start-Sleep -Seconds {{ .sleepAfterSeconds }}
              {{- end }}
          volumeMounts:
            - name: oneagent
              mountPath: {{ default "C:\\OneAgent" .mountPath | quote }}
          terminationMessagePolicy: FallbackToLogsOnError
      {{- end }}
      {{- end }}
      # ---------------------------------------------

      containers:
        - name: {{ $name }}
          image: '{{ tpl .Values.image.registry . }}/{{ tpl .Values.image.repository . }}:{{ .Values.image.tag | default .Chart.AppVersion }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}

          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          # env from config/secrets
          envFrom:
            - configMapRef:
                name: {{ $name }}
          {{- range .Values.secrets }}
          {{- if eq .type "map" }}
            - secretRef:
                name: {{ printf "%s-%s" $name ( tpl .nameSuffix $ ) }}
          {{- end }}
          {{- end }}

          # ---- Dynatrace/TCS env for tcs-ui (parametrized) ----
          {{- with .Values.tcs.env }}
          env:
          {{- range . }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- end }}
          # -----------------------------------------------------

          # Mounts for tcs-ui container (includes OneAgent mountPath from values)
          volumeMounts:
          {{- range .Values.secrets }}
          {{- if eq .type "file" }}
            - name: {{ tpl .nameSuffix $ }}
              mountPath: {{ .mountPath }}
          {{- end }}
          {{- end }}
          {{- range .Values.volumes }}
            - name: {{ .name }}
              mountPath: {{ tpl .mountPath $ }}
          {{- end }}
            - name: oneagent
              mountPath: {{ default "C:\\OneAgent" .Values.appConfig.initOneAgent.mountPath | quote }}

      volumes:
        # scratch for OneAgent files (size limit optional)
        - name: oneagent
          emptyDir:
            sizeLimit: 1Gi

        {{- range .Values.secrets }}
        {{- if eq .type "file" }}
        - name: {{ tpl .nameSuffix $ }}
          secret:
            secretName: {{ printf "%s-%s" $name ( tpl .nameSuffix $ ) }}
        {{- end }}
        {{- end }}

        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- with .hostPath }}
          hostPath:
            {{- tpl (toYaml .) $ | nindent 12 }}
          {{- end }}
          {{- with .pvc }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" $name .nameSuffix }}
          {{- end }}
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}


==================================
# ... (all your existing values above) ...

image:
  registry: 123456789012.dkr.ecr.us-east-1.amazonaws.com
  repository: 'usmg/elements/{{ include "app.name" . }}-{{ .Values.component }}'
  pullPolicy: Always
  # tag: "6.00.003.000-v1.0.0"

# ---- NEW: env for the tcs-ui container (parametrized) ----
tcs:
  env:
    # .NET Framework
    - name: COR_ENABLE_PROFILING
      value: "0x01"
    - name: COR_PROFILER
      value: "{B7038F67-52FC-4DA2-AB02-969B3C1EDA03}"
    - name: COR_PROFILER_PATH_32
      value: "C:\\oneagent\\agent\\lib\\oneagentloader.dll"
    - name: COR_PROFILER_PATH_64
      value: "C:\\oneagent\\agent\\lib64\\oneagentloader.dll"

    # .NET Core
    - name: CORECLR_ENABLE_PROFILING
      value: "0x01"
    - name: CORECLR_PROFILER
      value: "{B7038F67-52FC-4DA2-AB02-969B3C1EDA03}"
    - name: CORECLR_PROFILER_PATH_32
      value: "C:\\oneagent\\agent\\lib\\oneagentloader.dll"
    - name: CORECLR_PROFILER_PATH_64
      value: "C:\\oneagent\\agent\\lib64\\oneagentloader.dll"

    # Agent activation (Dynatrace)
    - name: DT_AGENTACTIVE
      value: "true"
# ----------------------------------------------------------

# keep your secrets/volumes as-is
secrets:
  - nameSuffix: '{{ include "app.tlsSecretNameSuffix" . }}'
    type: file
    external: false
    mountPath: C:\tls
  - nameSuffix: '{{ include "app.authTlsSecretNameSuffix" . }}'
    type: map
    external: true
    refreshInterval: 1m
    secretsManagerPath: /usmg/{{ .Values.environment }}/elements/tcs/{{ .Values.component }}-auth-tls

volumes:
  - name: smb-fsx
    hostPath:
      path: Z:\usmg\{{ .Values.environment }}\tcs
      type: Directory
    mountPath: '{{ .Values.appConfig.appShare }}'

# ---- OneAgent init container config (parametrized) ----
appConfig:
  # ... all your existing appConfig keys here (ComDB*, TLS, etc) ...

  initOneAgent:
    enabled: true
    image:
      registry: 123456789012.dkr.ecr.us-east-1.amazonaws.com
      repository: usmg/commons/dynatrace-oneagent
      tag: init-win-ltsc2022
      pullPolicy: Always
    # *** this drives the mountPath in BOTH the init container and tcs-ui container ***
    mountPath: "C:\\OneAgent"

    # If you want the init container to remain alive after script completes
    # 15 minutes = 900 seconds; set 0 (or remove) to disable the post-sleep
    sleepAfterSeconds: 900

    # Your OneAgent setup script (unchanged from your earlier file)
    script: |-
      Write-Host "Copying agent...";
      Copy-Item -Path "C:\OneAgentInstall\*" -Destination "C:\OneAgent" -Recurse

      Write-Host "Configuring agent...";
      $manifest = Get-Content "C:\OneAgent\manifest.json" | ConvertFrom-Json
      $confDir = "C:\OneAgent\agent\conf"
      New-Item -ItemType Directory -Path $confDir -Force | Out-Null
      $config = Join-Path $confDir "standalone.conf"

      Add-Content -Path $config -Value ("tenant " + $manifest.tenantUUID)
      Add-Content -Path $config -Value ("tenanttoken " + $manifest.tenantToken)
      Add-Content -Path $config -Value ("server https://usmg-{{ .Values.accountEnv }}-elements-eks-blue-activate.observability.svc.cluster.local/communication")
      Add-Content -Path $config -Value "storage C:\OneAgent"
      Add-Content -Path $config -Value "loglevelcon NONE"


=======
Heads-up (ConfigMap)

You already fixed your ConfigMap to exclude the complex initOneAgent object. Keep the bottom of the ConfigMap like this:
{{- $cfg := omit .Values.appConfig "initOneAgent" }}
{{- tpl ( toYaml $cfg ) $ | nindent 2 }}

