{{- $name := .Release.Name }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}

  {{- if not .Values.autoscaling.enabled }}
  {{- with .Values.replicaCount }}
  replicas: {{ . }}
  {{- end }}
  {{- end }}

  template:
    metadata:
      # annotations:
      #   dynatrace.com/inject: '{{ .Values.appConfig.enabledDynatrace }}'
      #   metadata-enrichment.dynatrace.com/inject: '{{ .Values.appConfig.enabledDynatrace }}'
      #   oneagent.dynatrace.com/inject: '{{ .Values.appConfig.enabledDynatrace }}'
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      {{- end }}

      # Merge pod securityContext so windowsOptions isn't overwritten later
      securityContext:
        windowsOptions:
          gmsaCredentialSpecName: {{ include "app.serviceAccountName" . }}
        {{- with .Values.podSecurityContext }}
        {{- toYaml . | nindent 8 }}
        {{- end }}

      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range . }}
        - {{- toYaml . | nindent 10 }}
          labelSelector:
            matchLabels:
              {{- include "app.selectorLabels" $ | nindent 14 }}
        {{- end }}
      {{- end }}

      # ===== Dynatrace OneAgent init container =====
      {{- $root := . }}
      {{- with $root.Values.appConfig.initOneAgent }}
      {{- if .enabled }}
      initContainers:
        - name: install-oneagent
          image: "{{- if .image.registry }}{{ .image.registry }}/{{ end }}{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .image.pullPolicy }}
          command: ["powershell","-NoProfile","-NonInteractive","-ExecutionPolicy","Bypass","-Command"]
          args:
            - |-
{{ tpl .script $root | nindent 14 }}
          volumeMounts:
            - name: oneagent
              mountPath: {{ default "C:\\OneAgent" .mountPath | quote }}
      {{- end }}
      {{- end }}
      # ============================================

      containers:
        - name: {{ $name }}
          image: '{{ tpl .Values.image.registry . }}/{{ tpl .Values.image.repository . }}:{{ .Values.image.tag | default .Chart.AppVersion }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}

          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          envFrom:
            - configMapRef:
                name: {{ $name }}
            {{- range .Values.secrets }}
            {{- if eq .type "map" }}
            - secretRef:
                name: {{ printf "%s-%s" $name ( tpl .nameSuffix $ ) }}
            {{- end }}
            {{- end }}

          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          volumeMounts:
            {{- range .Values.secrets }}
            {{- if eq .type "file" }}
            - name: {{ tpl .nameSuffix $ }}
              mountPath: {{ .mountPath }}
            {{- end }}
            {{- end }}
            {{- range .Values.volumes }}
            - name: {{ .name }}
              mountPath: {{ tpl .mountPath $ }}
            {{- end }}

      volumes:
        # Shared workspace for the init container to drop OneAgent files
        - name: oneagent
          emptyDir:
            sizeLimit: 1Gi

        {{- range .Values.secrets }}
        {{- if eq .type "file" }}
        - name: {{ tpl .nameSuffix $ }}
          secret:
            secretName: {{ printf "%s-%s" $name ( tpl .nameSuffix $ ) }}
        {{- end }}
        {{- end }}

        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- with .hostPath }}
          hostPath:
            {{- tpl (toYaml .) $ | nindent 12 }}
          {{- end }}
          {{- with .pvc }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" $name .nameSuffix }}
          {{- end }}
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      # ============================================

      containers:
        - name: {{ $name }}
          image: '{{ tpl .Values.image.registry . }}/{{ tpl .Values.image.repository . }}:{{ .Values.image.tag | default .Chart.AppVersion }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}

          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          envFrom:
            - configMapRef:
                name: {{ $name }}
            {{- range .Values.secrets }}
            {{- if eq .type "map" }}
            - secretRef:
                name: {{ printf "%s-%s" $name ( tpl .nameSuffix $ ) }}
            {{- end }}
            {{- end }}

          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          volumeMounts:
            {{- range .Values.secrets }}
            {{- if eq .type "file" }}
            - name: {{ tpl .nameSuffix $ }}
              mountPath: {{ .mountPath }}
            {{- end }}
            {{- end }}
            {{- range .Values.volumes }}
            - name: {{ .name }}
              mountPath: {{ tpl .mountPath $ }}
            {{- end }}

      volumes:
        # Shared workspace for the init container to drop OneAgent files
        - name: oneagent
          emptyDir:
            sizeLimit: 1Gi

        {{- range .Values.secrets }}
        {{- if eq .type "file" }}
        - name: {{ tpl .nameSuffix $ }}
          secret:
            secretName: {{ printf "%s-%s" $name ( tpl .nameSuffix $ ) }}
        {{- end }}
        {{- end }}

        {{- range .Values.volumes }}
        - name: {{ .name }}
          {{- with .hostPath }}
          hostPath:
            {{- tpl (toYaml .) $ | nindent 12 }}
          {{- end }}
          {{- with .pvc }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" $name .nameSuffix }}
          {{- end }}
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}


#############

appConfig:
  # ... (your existing appConfig stays)

  ## Dynatrace InitContainer
  initOneAgent:
    enabled: true
    image:
      registry: 123456789012.dkr.ecr.us-east-1.amazonaws.com
      repository: dynatrace-oneagent
      tag: init-win-ltsc2022
      pullPolicy: Always
    mountPath: "C:\\OneAgent"
    # PowerShell script rendered with tpl so you can use other chart values inside
    script: |-
      Write-Host "Copying agent..."
      Copy-Item -Path "C:\OneAgentInstall\*" -Destination "C:\OneAgent" -Recurse

      Write-Host "Configuring agent..."
      $manifest = Get-Content "C:\OneAgent\manifest.json" | ConvertFrom-Json

      # Create conf file (overwrites if exists)
      $confDir = "C:\OneAgent\agent\conf"
      New-Item -ItemType Directory -Path $confDir -Force | Out-Null
      $config = Join-Path $confDir "standalone.conf"

      Set-Content -Path $config -Value ("tenant " + $manifest.tenantUUID)
      Add-Content -Path $config -Value ("tenanttoken " + $manifest.tenantToken)
      Add-Content -Path $config -Value ("server https://{{ .Values.appConfig.appName | default (include "app.name" .) }}-{{ .Values.component }}.elements-{{ .Values.environment }}-{{ .Values.deploymentId }}.usmg-{{ .Values.accountEnv }}.aws.zilverton.com/communication")
      Add-Content -Path $config -Value "storage C:\OneAgent"
      Add-Content -Path $config -Value "loglevelcon NONE"


################

helm lint .

helm template . to confirm initContainers renders whether or not topologySpreadConstraints is set.

Ensure enabled is boolean (not quoted).
